{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/admin/admin.component.ts","webpack:///src/app/admin/admin.component.html","webpack:///src/app/admin/get-contacts/get-contacts.component.ts","webpack:///src/app/admin/get-contacts/get-contacts.component.html","webpack:///src/app/admin/get-users/get-users.component.ts","webpack:///src/app/admin/get-users/get-users.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/product-create/product-create.component.ts","webpack:///src/app/components/product-create/product-create.component.html","webpack:///src/app/components/product-details/product-details.component.ts","webpack:///src/app/components/product-list/product-list.component.ts","webpack:///src/app/components/product-list/product-list.component.html","webpack:///src/app/edit-contact/edit-contact.component.ts","webpack:///src/app/edit-contact/edit-contact.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/services/contacts.service.ts","webpack:///src/app/services/product.service.ts","webpack:///src/app/services/users.service.ts","webpack:///src/app/signup/signup.component.ts","webpack:///src/app/signup/signup.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AdminComponent","selector","templateUrl","styleUrls","GetContactsComponent","ps","msg","contacts","allContacts","result","err","deleteContact","subscribe","res","splice","GetUsersComponent","us","users","allUsers","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","userAuthenticated","localStorage","getItem","isAdmin","AppModule","declarations","providers","bootstrap","ProductCreateComponent","name","number","job","location","addContact","ProductDetailsComponent","productService","route","router","currentProduct","message","getProduct","snapshot","paramMap","get","read","product","console","log","error","status","data","update","response","available","navigate","ProductListComponent","currentIndex","readProducts","readAll","products","index","deleteAll","searchByName","deleteAllProducts","EditContactComponent","fb","contact","createForm","angForm","group","required","params","editContact","updateContact","HomeComponent","LoginComponent","removeItem","window","open","loginForm","username","password","compose","minLength","pattern","login","resp","setItem","setValue","ContactsService","http","api","headersVal","set","headers","toPromise","obj","post","providedIn","baseURL","ProductService","httpClient","put","UsersService","email","user","SignupComponent","addUser","signUpForm","confpassword","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>admin works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { ContactsService } from 'src/app/services/contacts.service';\n\n@Component({\n  selector: 'app-get-contacts',\n  templateUrl: './get-contacts.component.html',\n  styleUrls: ['./get-contacts.component.css']\n})\nexport class GetContactsComponent implements OnInit {\n  msg=\"\"\n  contacts=[]\n  constructor(private ps:ContactsService) { \n    this.ps.allContacts().then(result=>{\n      this.contacts=result\n\n    }).catch(err=>{\n      this.msg=\"error when loading contacts data \\n\" + err\n    })\n  }\n  // product-get.component.ts\n\ndeleteContact(id) {\n  this.ps.deleteContact(id).subscribe(res => {\n    this.contacts.splice(id, 1);\n  });\n}\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>List of Contacts</h2>\n<span>{{msg}}</span>\n<table class=\"table table-hover\">\n    <thead>\n         <th>Employee ID</th>\n        <th>Name</th>\n        <th>Number</th>\n        <th >Job</th>\n        <th>Location</th>\n        <th colspan=\"2\"> Action</th>\n        \n    </thead>\n    <tbody>\n        <tr *ngFor=\"let contact of contacts\">\n        <th >{{contact._id}}</th>\n        <td>{{contact.name}}</td>\n        <td>{{contact.number}}</td>\n        <td >{{contact.job}}</td>\n        <td>{{contact.location}}</td>\n\n        <span class=\"edit\" [routerLink]=\"['edit', contact._id]\">         \n            <button type=\"button\" class=\"btn btn-success btn-sm\">Edit</button>\n        </span>\n\n        <span class=\"delete\" > \n            <button type=\"button\" (click) = \"deleteContact(contact._id)\" class=\"btn btn-danger btn-sm\">Delete</button>\n        </span>\n      \n        </tr>\n    </tbody>\n\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { UsersService } from 'src/app/services/users.service';\n\n@Component({\n  selector: 'app-get-users',\n  templateUrl: './get-users.component.html',\n  styleUrls: ['./get-users.component.css']\n})\nexport class GetUsersComponent implements OnInit {\nmsg=\"\"\nusers=[]\n  constructor(private us:UsersService) {\n    this.us.allUsers().then(result=>{\n      this.users=result\n\n    }).catch(err=>{\n      this.msg=\"error when loading user data \\n\" + err\n    })\n   }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>List of Users</h2>\n<span>{{msg}}</span>\n<table class=\"table table-hover\">\n    <thead>\n        <th>Userame</th>\n        <th>Email</th>\n        <th >Actions</th>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let user of users\">\n            <td>{{user.username}}</td>\n            <td>{{user.email}}</td>\n            <td ><a href=\"#\" class=\"btn btn-danger\">Block</a></td>\n        </tr>\n    </tbody>\n\n</table>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminComponent } from './admin/admin.component';\nimport { GetContactsComponent } from './admin/get-contacts/get-contacts.component';\nimport { GetUsersComponent } from './admin/get-users/get-users.component';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { ProductCreateComponent } from './components/product-create/product-create.component';\nimport { ProductDetailsComponent } from './components/product-details/product-details.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport {EditContactComponent} from './edit-contact/edit-contact.component';\n\n\nconst routes: Routes = [\n  { path: 'products', component: ProductListComponent },\n  { path: 'products/:id', component: ProductDetailsComponent },\n  { path: 'create', component: ProductCreateComponent },\n  {\n    path:'signup',\n    component:SignupComponent\n  },\n  {\n    path:'login',\n    component:LoginComponent\n  },\n  {\n    path:'',\n    component:HomeComponent\n  },\n  {\n    path:'admin',\n    component:AdminComponent\n  },\n  {\n    path:'admin/listusers',\n    component:GetUsersComponent\n  },\n  {\n    path:'admin/listcontacts',\n    component:GetContactsComponent\n  },\n  {\n    path: 'edit',\n    component: EditContactComponent\n  }\n  \n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'phone-book-number';\n  userAuthenticated = localStorage.getItem(\"token\");\n  isAdmin = localStorage.getItem(\"username\")==\"admin\"\n\n  constructor(){\n    \n  }\n}\n","<nav class=\"navbar navbar-expand-sm bg-danger\">\n  <div class=\"container-fluid\">\n  <div id=\"userNavigation\" *ngIf=\"!isAdmin; else adminNavigation\">\n      <ul class=\"navbar-nav\" >\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"/\" routerLinkActive=\"active\">Home</a>\n      </li>\n    <div id=\"unauth\" *ngIf=\"userAuthenticated==null;else auth\" class=\"navbar-nav\"> \n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"signup\"> Sign Up</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"login\">Login</a>\n      </li>\n\n    </div>\n    <ng-template #auth>\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"login\">Logout</a>\n      </li>\n      \n\n    </ng-template>\n    \n      </ul>\n  </div>\n  </div>\n  <ng-template id=\"adminNavigation\" #adminNavigation>\n   \n    <ul class=\"navbar-nav\" >\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"/\" routerLinkActive=\"active\">Admin page</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"admin/listusers\">Users</a>\n      </li>\n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"admin/listcontacts\">Contacts</a>\n      \n      </li>\n      <li class=\"nav-item\">\n        <a routerLink=\"products\" class=\"nav-link\">contact</a>\n      </li>\n      <li class=\"nav-item\">\n        <a routerLink=\"create\" class=\"nav-link\">CreateContact</a>\n      </li>\n    \n      <li class=\"nav-item\">\n        <a class=\" nav-link text-light\" routerLink=\"login\">Logout</a>\n      </li>\n      </ul>\n    </ng-template>\n</nav>\n\n<div class=\"container\">\n<router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\r\nimport{HttpClientModule} from '@angular/common/http';\r\nimport{UsersService} from './services/users.service';\r\nimport { GetUsersComponent } from './admin/get-users/get-users.component';\r\nimport { GetContactsComponent } from './admin/get-contacts/get-contacts.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { ProductCreateComponent } from './components/product-create/product-create.component';\nimport { ProductListComponent } from './components/product-list/product-list.component';\nimport { EditContactComponent } from './edit-contact/edit-contact.component';\r\n\r\n\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SignupComponent,\r\n    LoginComponent,\r\n    HomeComponent,\r\n    GetUsersComponent,\r\n    GetContactsComponent,\r\n    AdminComponent,\r\n    ProductCreateComponent,\r\n    ProductListComponent,\r\n    EditContactComponent,\r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [UsersService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from 'src/app/services/product.service';\nimport{FormGroup,FormBuilder,Validators,FormControl} from '@angular/forms';\nimport{ContactsService} from \"../../services/contacts.service\";\n\n@Component({\n  selector: 'app-product-create',\n  templateUrl: './product-create.component.html',\n  styleUrls: ['./product-create.component.css']\n})\nexport class ProductCreateComponent implements OnInit {\n  \n  \n\n  constructor( private us:ContactsService) { }\n  \n\nmsg = new FormControl(\"\");\n\naddContact(name,number,job,location){\n  //logic\n\n  this.us.addContact(name,number,job,location)\n  // .then(resp=>{\n  //   if(resp['success']){\n  //     localStorage.setItem(\"token\",resp['token']);\n  //     this.msg.setValue(\"User Added Successfully\");\n      \n  //   }\n  // }).catch(err=>{\n  //  this.msg.setValue(\"Error:\" + err.message);\n  // })\n}\n\n  ngOnInit(): void {\n  }\n\n  \n\n  // createProduct(): void {\n  //   const data = {\n  //     name: this.product.name,\n  //     number: this.product.number,\n  //     job:this.product.job,\n  //     location:this.product.location\n  //   };\n\n  //   this.productService.create(data)\n  //     .subscribe(\n  //       response => {\n  //         console.log(response);\n  //         this.submitted = true;\n  //       },\n  //       error => {\n  //         console.log(error);\n  //       });\n  // }\n\n  // newProduct(): void {\n  //   this.submitted = false;\n  //   this.product = {\n  //     name: '',\n  //     number: '',\n  //     job:'',\n  //     location:''\n  //   };\n  // }\n\n}","<h2>signup for free</h2>\n<div class=\"card\" style=\"width: 100%;\">\n    <div class=\"card-body\">\n      <form  ><!--  [formGroup]=\"signUpForm\" -->\n        <div class=\"form-group\">\n          <label for=\"name\">name :</label>\n          <input type=\"text\" class=\"form-control\" id=\"name\" \n           #name required>\n          <!-- <small id=\"nameHelp\" class=\"form-text text-muted\">plese enter your full name .</small> -->\n          \n        </div>\n        <div class=\"form-group\">\n          <label for=\"number\">number :</label>\n          <input type=\"number\" class=\"form-control\" id=\"number\"  #number required>\n          \n        </div>\n        <div class=\"form-group\">\n            <label for=\"job\">job :</label>\n            <input type=\"text\" class=\"form-control\" id=\"job\" \n            #job required>\n            <!-- <small id=\"nameHelp\" class=\"form-text text-muted\">plese enter your full name .</small> -->\n            \n           \n  \n          </div>\n          <div class=\"form-group\">\n            <label for=\"location\">location :</label>\n            <input type=\"text\" class=\"form-control\" id=\"location\" \n             #location required>\n            <!-- <small id=\"nameHelp\" class=\"form-text text-muted\">plese enter your full name .</small> -->\n            \n           \n  \n          </div>\n        \n        \n        <div class=\"form-group\">\n          <input type=\"submit\"   \n          class=\"form-control btn btn-primary\" value=\"Add\"\n          (click)=\"addContact(name.value,number.value,job.value,location.value)\"/>\n          <span class=\"alert-danger\">{{msg.value}}</span>\n        </div>\n        \n      </form>\n    </div>\n  </div>\n  \n","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from 'src/app/services/product.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-product-details',\n  templateUrl: './product-details.component.html',\n  styleUrls: ['./product-details.component.css']\n})\nexport class ProductDetailsComponent implements OnInit {\n  currentProduct = null;\n  message = '';\n\n  constructor(\n    private productService: ProductService,\n    private route: ActivatedRoute,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.message = '';\n    this.getProduct(this.route.snapshot.paramMap.get('id'));\n  }\n\n  getProduct(id): void {\n    this.productService.read(id)\n      .subscribe(\n        product => {\n          this.currentProduct = product;\n          console.log(product);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n  setAvailableStatus(status): void {\n    const data = {\n      name: this.currentProduct.name,\n      number: this.currentProduct.number,\n      job:this.currentProduct.job,\n      location:this.currentProduct.location\n    };\n\n    this.productService.update(this.currentProduct.id, data)\n      .subscribe(\n        response => {\n          this.currentProduct.available = status;\n          console.log(response);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n  updateProduct(): void {\n    this.productService.update(this.currentProduct.id, this.currentProduct)\n      .subscribe(\n        response => {\n          console.log(response);\n          this.message = 'The product was updated!';\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n  deleteProduct(): void {\n    this.productService.delete(this.currentProduct.id)\n      .subscribe(\n        response => {\n          console.log(response);\n          this.router.navigate(['/products']);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ProductService } from 'src/app/services/product.service';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css']\n})\nexport class ProductListComponent implements OnInit {\n\n  products: any;\n  currentProduct = null;\n  currentIndex = -1;\n  name = '';\n\n  constructor(private productService: ProductService) { }\n\n  ngOnInit(): void {\n    this.readProducts();\n  }\n\n  readProducts(): void {\n    this.productService.readAll()\n      .subscribe(\n        products => {\n          this.products = products;\n          console.log(products);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n  refresh(): void {\n    this.readProducts();\n    this.currentProduct = null;\n    this.currentIndex = -1;\n  }\n\n  setCurrentProduct(product, index): void {\n    this.currentProduct = product;\n    this.currentIndex = index;\n  }\n\n  deleteAllProducts(): void {\n    this.productService.deleteAll()\n      .subscribe(\n        response => {\n          console.log(response);\n          this.readProducts();\n        },\n        error => {\n          console.log(error);\n        });\n  }\n\n  searchByName(): void {\n    this.productService.searchByName(this.name)\n      .subscribe(\n        products => {\n          this.products = products;\n          console.log(products);\n        },\n        error => {\n          console.log(error);\n        });\n  }\n}\n","<div class=\"list row\">\n    <div class=\"col-md-8\">\n      <div class=\"input-group mb-4\">\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"Search by name\"\n          [(ngModel)]=\"name\"\n        />\n        <div class=\"input-group-append\">\n          <button\n            class=\"btn btn-outline-secondary\"\n            type=\"button\"\n            (click)=\"searchByName()\"\n          >\n            Search\n          </button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <h4>Product List</h4>\n      <ul class=\"list-group\">\n        <li\n          class=\"list-group-item\"\n          *ngFor=\"let product of products; let i = index\"\n          [class.active]=\"i == currentIndex\"\n          (click)=\"setCurrentProduct(product, i)\"\n        >\n  \n        </li>\n      </ul>\n  \n      <button class=\"m-4 btn btn-sm btn-danger\" (click)=\"deleteAllProducts()\">\n        Delete All\n      </button>\n    </div>\n    <div class=\"col-md-6\">\n      <div *ngIf=\"currentProduct\">\n        <h4>Product</h4>\n        <div>\n          <label><strong>Name:</strong></label> \n        </div>\n        <div>\n          <label><strong>Number:</strong></label>\n  \n        </div>\n        <div>\n          <label><strong>Job:</strong></label>\n  \n        </div>\n        <div>\n            <label><strong>Location:</strong></label>\n    \n          </div>\n  \n        <a class=\"badge badge-warning\" routerLink=\"/products/\">\n          Edit\n        </a>\n      </div>\n  \n      <div *ngIf=\"!currentProduct\">\n        <br />\n        <p>Please click on a product</p>\n      </div>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport{ContactsService} from \"../services/contacts.service\";\n@Component({\n  selector: 'app-edit-contact',\n  templateUrl: './edit-contact.component.html',\n  styleUrls: ['./edit-contact.component.css']\n})\nexport class EditContactComponent implements OnInit {\n  angForm: FormGroup;\n  contact: any = {};\n\n  constructor(private route: ActivatedRoute, private router: Router, private ps: ContactsService, private fb: FormBuilder) {\n    this.createForm();\n   }\n\n   createForm() {\n    this.angForm = this.fb.group({\n      name: ['', Validators.required ],\n      number: ['', Validators.required ],\n      job: ['', Validators.required ],\n      location: ['',Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.ps.editContact(params.id).subscribe(res => {\n        this.contact = res;\n    });\n  });\n  }\n\n  updateContact(name, number, job,location) {\n    this.route.params.subscribe(params => {\n      this.ps.updateContact(name, number, job ,location, params.id);\n      this.router.navigate(['contacts']);\n    });\n  }\n\n \n\n}\n","<div class=\"card\">\n    <div class=\"card-body\">\n      <form [formGroup]=\"angForm\" novalidate>\n        <div class=\"form-group\">\n          <label class=\"col-md-4\">Name</label>\n          <input type=\"text\" class=\"form-control\" \n            formControlName=\"name\" \n            #name \n            [(ngModel)] = \"contact.name\"/>\n        </div>\n        <div *ngIf=\"angForm.controls['name'].invalid && (angForm.controls['name'].dirty || angForm.controls['name'].touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"angForm.controls['name'].errors.required\">\n            Contact Name is required.\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-md-4\">Contact number </label>\n          <input class=\"form-control\" type=\"number\" \n          formControlName=\"number\" \n          #number [(ngModel)] = \"contact.number\">/>\n        </div>\n        <div *ngIf=\"angForm.controls['number'].invalid && (angForm.controls['number'].dirty || angForm.controls['number'].touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"angForm.controls['number'].errors.required\">\n            Contact number is required.\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label class=\"col-md-4\">Contact Job</label>\n          <input type=\"text\" class=\"form-control\" \n            formControlName=\"job\" \n            #job\n            [(ngModel)] = \"contact.job\"\n          />\n        </div>\n        <div *ngIf=\"angForm.controls['job'].invalid && (angForm.controls['job'].dirty || angForm.controls['job'].touched)\" class=\"alert alert-danger\">\n          <div *ngIf=\"angForm.controls['job'].errors.required\">\n            Contact Job is required.\n          </div>\n        </div>\n        <div class=\"form-group\">\n            <label class=\"col-md-4\">Contact Location</label>\n            <input type=\"text\" class=\"form-control\" \n              formControlName=\"location\" \n              #location\n              [(ngModel)] = \"contact.location\"\n            />\n          </div>\n          <div *ngIf=\"angForm.controls['location'].invalid && (angForm.controls['location'].dirty || angForm.controls['location'].touched)\" class=\"alert alert-danger\">\n            <div *ngIf=\"angForm.controls['location'].errors.required\">\n              Contact Location is required.\n            </div>\n          </div>\n        <div class=\"form-group\">\n            \n          <button (click) = \"updateContact(name.value, number.value, job.value,location.value)\" type=\"submit\" class=\"btn btn-primary\"\n          [disabled]=\"angForm.invalid\" >\n            Update Contact\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>home works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport {FormGroup,FormControl,FormBuilder,Validators} from '@angular/forms';\nimport {UsersService} from '../services/users.service';\nimport {Router} from '@angular/router';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  loginForm:FormGroup;\n  msg = new FormControl(\"\");\n\n  constructor(private fb:FormBuilder, \n    private us:UsersService,\n    private route:Router) { \n      if(localStorage.getItem(\"token\")==null){\n        //login\n        this.createForm();\n      }else{\n        //logout\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"username\");\n        this.route.navigate([\"/\"]);\n        //refresh page\n        window.open(\"/\",\"_self\");\n      }\n    \n  }\n\n\n  createForm() {\n    this.loginForm = this.fb.group({\n      username :['',Validators.required],\n      password :['',Validators.compose([\n        Validators.required,\n        Validators.minLength(5),\n        Validators.pattern(/\\w{5,14}/)\n      ])],\n    }\n    );//loginform controls/validation \n  } \n\n  login(username,password){\n    //logic\n    this.us.login(username,password)\n    .then(resp=>{\n      if(resp['success']){\n        localStorage.setItem(\"token\",resp['token']);\n        localStorage.setItem(\"username\",username);\n        if(username==\"admn\"){\n          this.route.navigate(['/admin']);\n          window.open(\"/admin\",\"_self\");\n        }else\n        this.route.navigate(['/'])\n         //refresh page\n         window.open(\"/\",\"_self\");\n        //this.msg.setValue(\"Login Successfully\");\n      }else{\n        this.msg.setValue(\"username or password incorrect\");\n      }\n    }).catch(err=>{\n     this.msg.setValue(\"Error:\" + err.message);\n    })\n    \n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>Login Member</h2>\n<div class=\"card\" style=\"width: 100%;\">\n    <div class=\"card-body\">\n      <form [formGroup]=\"loginForm\"><!--  [formGroup]=\"loginForm\" -->\n        <div class=\"form-group\">\n          <label for=\"username\">Userame :</label>\n          <input type=\"text\" class=\"form-control\" id=\"username\" \n          formControlName=\"username\" #username required>\n          <!-- <small id=\"nameHelp\" class=\"form-text text-muted\">plese enter your full name .</small> -->\n          <div *ngIf=\"loginForm.controls['username'].invalid && (loginForm.controls['username'].dirty || \n          loginForm.controls['username'].touched)\" class=\"alert alert-info\">\n          username is required.\n        </div> \n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Password :</label>\n          <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" #password required>\n          <div *ngIf=\"loginForm.controls['password'].invalid && (loginForm.controls['password'].dirty || \n          loginForm.controls['password'].touched)\" class=\"alert alert-info\">\n           <span *ngIf=\"loginForm.controls['password'].errors.required\">password is required</span>\n           <span *ngIf=\"loginForm.controls['password'].errors.minlength\">password length must be min 5 at less</span>\n           <span *ngIf=\"loginForm.controls['password'].errors.pattern\">password must be </span>\n        </div>\n        </div>\n        \n        <div class=\"form-group\">\n          <input type=\"submit\" [disabled]=\"loginForm.pristine || loginForm.invalid\"  \n          class=\"form-control btn btn-primary\" value=\"Login\"\n          (click)=\"login(username.value,password.value)\"/>\n          <span class=\"alert-danger\">{{msg.value}}</span>\n        </div>\n        \n      </form>\n    </div>\n  </div>\n  \n","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpHeaders,HttpResponse,HttpHandler,} from \"@angular/common/http\";\nimport Contacts from '../models/Contacts.model';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ContactsService {\napi = \"http://localhost:3007/contacts\";\n  constructor(private http:HttpClient) { }\n\n  allContacts(){\n    let headersVal = new HttpHeaders()\n    .set(\"x-auth-token\",localStorage.getItem(\"token\"));\n    \n    return this.http.get<Contacts[]>(this.api,{headers:headersVal}).toPromise();\n  }\n\n  // deleteContact(id) {\n  //   let headersVal = new HttpHeaders()\n  //   .set(\"x-auth-token\",localStorage.getItem(\"token\"));\n  //   //let url = `${this.baseUri}/delete/${id}`;\n  //   return this.http.delete(this.api+\":id\", { headers:headersVal }).toPromise();\n  // }\n\n  // addContact(name,number,job,location){\n  //   //call api\n\n  //   const contact ={\n  //     name:name,\n  //     number:number,\n  //     job:job,\n  //     location:location\n  //   };\n\n  //   return this.http.post(this.api,contact,{}).toPromise();\n\n  // }\n\n\n\n  addContact(name, number, job,location) {\n    console.log(name, number, job,location);\n    const obj = {\n      name, number, job,location\n    };\n    this.http.post(`${this.api}`, obj)\n        .subscribe(res => console.log('Done'));\n  }\n\n  getContacts() {\n    return this\n           .http\n           .get(`${this.api}`);\n  }\n\n  editContact(id) {\n    return this\n            .http\n            .get(`${this.api}/${id}`);\n  }\n\n  updateContact(name, number, job,location, id) {\n    const obj = {\n      name, number, job,location\n    };\n    this\n      .http\n      .post(`${this.api}/${id}`, obj)\n      .subscribe(res => console.log('Update Complete'));\n  }\n\n  deleteContact(id) {\n    return this\n              .http\n              .get(`${this.api}/${id}`);\n  }\n \n\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst baseURL = 'http://localhost:3007/contacts';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  readAll(): Observable<any> {\n    return this.httpClient.get(baseURL);\n  }\n\n  read(id): Observable<any> {\n    return this.httpClient.get(`${baseURL}/${id}`);\n  }\n\n  create(data): Observable<any> {\n    return this.httpClient.post(baseURL, data);\n  }\n\n  update(id, data): Observable<any> {\n    return this.httpClient.put(`${baseURL}/${id}`, data);\n  }\n\n  delete(id): Observable<any> {\n    return this.httpClient.delete(`${baseURL}/${id}`);\n  }\n\n  deleteAll(): Observable<any> {\n    return this.httpClient.delete(baseURL);\n  }\n\n  searchByName(name): Observable<any> {\n    return this.httpClient.get(`${baseURL}?name=${name}`);\n  }\n}","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpHeaders} from \"@angular/common/http\";\nimport Users from '../models/Usesrs.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n  api = \"http://localhost:3007/users/\"\n\n  constructor(private http:HttpClient) { }\n\n  addUser(username,email,password){\n    //call api\n    \n    const user ={\n      username:username,\n      email:email,\n      password:password\n    };\n\n    return this.http.post(this.api+\"user\",user,{}).toPromise();\n\n  }\n\n  login(username,password){\n    //call api\n    let headersVal = new HttpHeaders()\n    .set(\"username\",username)\n    .set(\"password\",password);\n    return this.http.get(this.api+\"login\",{headers:headersVal}).toPromise();\n    \n  }\n  allUsers(){\n    let headersVal = new HttpHeaders()\n    .set(\"x-auth-token\",localStorage.getItem(\"token\"));\n    \n    return this.http.get<Users[]>(this.api+\"user\",{headers:headersVal}).toPromise();\n  }\n  \n}\n\n\n\n// this.http.post(api+\"user\",user,{}).subscribe(resp =>{\n    //   if(resp['success'] == true)\n    //   localStorage.setItem(\"token\",resp['token']);\n    //   else\n    //   console.log(resp);\n\n    // },err=>{\n    //   console.log(\"err=\");\n    //   console.log(\"err name :\" + err.name);\n\n    // })\n","import { Component, OnInit } from '@angular/core';\nimport{FormGroup,FormBuilder,Validators,FormControl} from '@angular/forms';\nimport{UsersService} from \"../services/users.service\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n  signUpForm:FormGroup;\n  msg = new FormControl(\"\");\n  constructor(private fb:FormBuilder, private us:UsersService) {\n    this.createForm();\n   }\n\n   addUser(username,email,password){\n     //logic\n     this.us.addUser(username,email,password)\n     .then(resp=>{\n       if(resp['success']){\n         localStorage.setItem(\"token\",resp['token']);\n         this.msg.setValue(\"User Added Successfully\");\n         \n       }\n     }).catch(err=>{\n      this.msg.setValue(\"Error:\" + err.message);\n     })\n     \n\n   }\n\n\n   createForm(){\n     this.signUpForm = this.fb.group({\n       username :['',Validators.required],\n       email: ['',Validators.compose([\n         Validators.required,\n         Validators.email,\n         Validators.pattern(/^([a-zA-Z0-9\\.-]+)@([a-zA-Z\\.-]+)\\.([a-z]{2,6})$/)\n       ])],\n       password :['',Validators.compose([\n         Validators.required,\n         Validators.minLength(5),\n         Validators.pattern(/\\w{5,14}/)\n       ])],\n       confpassword :['',Validators.required],\n       \n\n     }); \n   }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>signup for free</h2>\r\n<div class=\"card\" style=\"width: 100%;\">\r\n    <div class=\"card-body\">\r\n      <form [formGroup]=\"signUpForm\"><!--  [formGroup]=\"signUpForm\" -->\r\n        <div class=\"form-group\">\r\n          <label for=\"username\">Userame :</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"username\" \r\n          formControlName=\"username\" #username required>\r\n          <!-- <small id=\"nameHelp\" class=\"form-text text-muted\">plese enter your full name .</small> -->\r\n          <div *ngIf=\"signUpForm.controls['username'].invalid && (signUpForm.controls['username'].dirty || \r\n          signUpForm.controls['username'].touched)\" class=\"alert alert-info\">\r\n          username is required.\r\n        </div> \r\n\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email :</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\" #email required>\r\n          <div *ngIf=\"signUpForm.controls['email'].invalid && (signUpForm.controls['email'].dirty || \r\n          signUpForm.controls['email'].touched)\" class=\"alert alert-info\">\r\n           <span *ngIf=\"signUpForm.controls['email'].errors.required\">Email is required</span>\r\n           <span *ngIf=\"signUpForm.controls['email'].errors.email\">please enter valid Email</span>\r\n        </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password :</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\" #password required>\r\n          <div *ngIf=\"signUpForm.controls['password'].invalid && (signUpForm.controls['password'].dirty || \r\n          signUpForm.controls['password'].touched)\" class=\"alert alert-info\">\r\n           <span *ngIf=\"signUpForm.controls['password'].errors.required\">password is required</span>\r\n           <span *ngIf=\"signUpForm.controls['password'].errors.minlength\">password length must be min 5 at less</span>\r\n           <span *ngIf=\"signUpForm.controls['password'].errors.pattern\">password must be </span>\r\n        </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"confpassword\">Confirm Password :</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"confpassword\" formControlName=\"confpassword\" #confpassword pattern=\"({{password.value}})\" required>\r\n          <div *ngIf=\"signUpForm.controls['confpassword'].invalid && (signUpForm.controls['confpassword'].dirty || \r\n          signUpForm.controls['confpassword'].touched)\" class=\"alert alert-info\">\r\n          <span *ngIf=\"signUpForm.controls['confpassword'].errors?.required\">confirm password is required </span> \r\n          <span *ngIf=\"signUpForm.controls['confpassword'].errors?.pattern\">\r\n            Paswords not match.</span>\r\n           \r\n        </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <input type=\"submit\" [disabled]=\"signUpForm.pristine || signUpForm.invalid\"  \r\n          class=\"form-control btn btn-primary\" value=\"Register\"\r\n          (click)=\"addUser(username.value,email.value,password.value)\"/>\r\n          <span class=\"alert-danger\">{{msg.value}}</span>\r\n        </div>\r\n        \r\n      </form>\r\n    </div>\r\n  </div>\r\n  \r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}